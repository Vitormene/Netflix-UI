{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listW","results","length","marginLeft","width","map","item","key","src","poster_path","alt","original_title","Featured","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","black","MyApp","movieList","setMovieList","featuredData","setFeaturedDta","blackHeader","setblackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","Helmet","role","aria-label","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a63a2e69.chunk.js","sourcesContent":["const API_KEY= 'c09a74f19614509d42170c93f2ef40f4';\nconst API_BASE= 'https://api.themoviedb.org/3';\n\n/*\n-originais da netflix\n-recomendados (trending)\n- em alta (top rated)\n- ação\n-comédia\n-terror\n-romance\n-documentários\n*/\n\nconst basicFetch = async(endpoint) =>{\n    const req = await fetch (`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch (`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items:  await basicFetch (`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items:  await basicFetch (`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items:  await basicFetch (`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items:  await basicFetch (`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ];\n    },\n    getMovieInfo: async(movieId, type) => {\n            let info = {};\n            \n            if (movieId) {\n                switch(type){\n                    case 'movie':\n                        info = await basicFetch (`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                        break;\n                    case 'tv':\n                        info = await basicFetch (`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                        break;\n                        default:\n                            info= null;\n                        break;\n                }\n            }\n\n            return info;\n    }\n}","import React, {useState} from 'react';\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nexport default function MovieRow ({title, items}){\n\n        const [scrollX, setScrollX] = useState(0);\n\n        const handleLeftArrow = () => {\n            let x = scrollX + Math.round(window.innerWidth / 2);\n            if(x > 0) {\n                x=0;\n            }\n            setScrollX(x);\n        }\n        const handleRigthArrow = () => {\n            let x = scrollX - Math.round(window.innerWidth / 2);\n            let listW = items.results.length * 150;\n            if((window.innerWidth -listW) > x) {\n                x = (window.innerWidth -listW) - 60;\n            }\n            setScrollX(x);\n        }\n            return(\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\n                <NavigateBeforeIcon style={{fontSize:50}}/>\n            </div>\n\n            <div className=\"movieRow--rigth\" onClick={handleRigthArrow}>\n                <NavigateNextIcon style={{fontSize:50}}/>\n            </div>\n\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0  && items.results.map((item, key)=>(\n                        <div key={key} className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300/${item.poster_path}`} alt={item.original_title}></img>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n            ) \n}","import React from 'react';\nimport './FeaturedMovie.css';\n\nexport default function Featured ({ item }) {\n    let firstDate = new Date(item.first_air_date);\n    let genres = [];\n\n    for (let i in item.genres) {\n        genres.push(item.genres[i].name)\n    }\n    let description = item.overview;\n    if(description.length > 200) {\n        description = description.substring(0, 200)+'...';\n    }\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                    </div>\n                    <div className=\"featured--description\">{description}</div>\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">&#9656; Assistir</a>\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha lista</a>\n                    </div>\n                    <div className=\"featured--genres\"><strong>Gêneros: </strong>{genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    )\n}","import React from 'react';\nimport './Header.css';\n\nexport default function Header ({black}) {\n    return(\n        <header className={black ? 'black' : ''}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\"></img>\n                </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"https://www.shitpostbot.com/img/sourceimages/angry-chicken-netflix-user-icon-5927959975f50.jpeg\" alt=\"usuario\"></img>\n                </a>\n            </div>\n        </header>\n    );\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\nimport Helmet from 'react-helmet'\n\nexport default function MyApp () {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedDta] = useState(null);\n  const [blackHeader, setblackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //pegando o featured\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedDta(chosenInfo);\n    }\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setblackHeader(true);\n      } else {\n        setblackHeader(false);\n      }\n    }\n    window.addEventListener('scroll', scrollListener);\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n  }, [])\n\n  return (\n    <div className=\"Page\">\n      <Helmet>\n        <title>Netlix</title>\n      </Helmet>\n      <Header black={blackHeader} />\n\n      {featuredData &&\n        <FeaturedMovie item={featuredData} />\n      }\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n      <footer>\n        Feito com <span role=\"img\" aria-label=\"coração\">❤️</span> por Vitor Menezes<br />\n      Direito de imagens para Netflix<br />\n      Dados pegos do site Themoviedb.org\n    </footer>\n\n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n          <img src=\"https://media.wired.com/photos/592744d3f3e2356fd800bf00/master/w_2560%2Cc_limit/Netflix_LoadTime.gif\" alt=\"carregando\" />\n        </div>\n      }\n    </div>\n  )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}